generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(100)
  username      String          @unique @db.VarChar(50)
  email         String          @unique @db.VarChar(100)
  password      String          @db.VarChar(255)
  phoneNumber   String?         @db.VarChar(15)
  isSeller      Boolean         @default(false)
  companyName   String?         @db.VarChar(100)
  description   String?         @db.Text
  contactPerson String?         @db.VarChar(100)
  address       String?         @db.Text
  roleId        Int?
  aboutUs       String?         @db.Text
  logo          String?         @db.VarChar(255)
  role          Role?           @relation(fields: [roleId], references: [id])
  orders        Order[]
  resets        PasswordReset[]
  cartItems     CartItem[]
  products      Product[]       @relation("UserProducts")
  Admins        Admins?

  @@index([username, email])
}

model Seller {
  id            Int            @id @default(autoincrement())
  products      Product[]
  notifications Notification[]
  Order         Order[] // Sellers handle multiple orders through their products
}

model Admins {
  id                  Int                   @id @default(autoincrement()) // Autoincrementing primary key
  adminId             Int // This will reference the User model where roleId = 1
  admin               User                  @relation(fields: [adminId], references: [id], onDelete: Cascade) // Foreign key relationship to User
  adminSettings       AdminSettings[]
  operationalSettings OperationalSettings[]

  @@unique([adminId]) // Ensure that a user can only appear once in the Admins table
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  price       Float
  description String
  userId      Int
  user        User        @relation("UserProducts", fields: [userId], references: [id])
  images      Image[]
  seller      Seller?     @relation(fields: [sellerId], references: [id]) // Product is associated with a Seller
  sellerId    Int?
  OrderItem   OrderItem[]
  cartItems   CartItem[]
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     Int
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model

  shipmentStatus         String  @default("Pending") // Possible values: "Pending", "Shipped", "Delivered"
  invoice                String? // Invoice number or reference
  refundStatus           String  @default("No Refund") // Possible values: "No Refund", "Refunded", "Partially Refunded"
  shippingCost           Float   @default(0.0) // Shipping cost associated with the order
  orderingStatus         String  @default("Pending") // Possible values: "Pending", "Completed", "Cancelled"
  orderFulfillmentStatus String  @default("Unfulfilled") // Possible values: "Unfulfilled", "Fulfilled"
  prePayment             Boolean @default(false) // Indicates if pre-payment was made
  paymentStatus          Boolean @default(false) // Indicates if the order has been fully paid
  Seller                 Seller? @relation(fields: [sellerId], references: [id])
  sellerId               Int?

  @@index([userId])
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id]) // Relation to Order
  productId Int
  product   Product @relation(fields: [productId], references: [id]) // Relation to Product

  // No need for a seller relation here as the seller can be accessed via the product
}

model Image {
  id        Int     @id @default(autoincrement())
  filename  String
  data      Bytes
  productId Int
  product   Product @relation(fields: [productId], references: [id]) // Relation to Product
}

model CartItem {
  id        Int @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int @default(1)

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  otp       String
  userId    Int
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@index([otp])
}

model Category {
  id                  Int        @id @default(autoincrement())
  name                String     @unique // Ensure name is unique
  categoryParentId    Int?
  categoryParent      Category?  @relation("CategoryHierarchy", fields: [categoryParentId], references: [id], onDelete: SetNull)
  subcategoryParentId Int?
  subcategoryParent   Category?  @relation("SubcategoryHierarchy", fields: [subcategoryParentId], references: [id], onDelete: SetNull)
  subcategories       Category[] @relation("CategoryHierarchy")
  nestedSubcategories Category[] @relation("SubcategoryHierarchy")
}

model Notification {
  id        Int      @id @default(autoincrement())
  sellerId  Int
  message   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  seller    Seller   @relation(fields: [sellerId], references: [id])
}

model Store {
  id          Int      @id @default(autoincrement())
  name        String
  logo        String?
  address     String
  email       String   @unique
  phoneNumber String
  aboutUs     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AdminSettings {
  id          Int    @id @default(autoincrement()) // Autoincrementing primary key
  siteName    String
  siteLogo    String
  siteAddress String
  siteEmail   String
  storePhone  String
  adminId     Int    @unique // Foreign key that references the Admins table
  admin       Admins @relation(fields: [adminId], references: [adminId], onDelete: Cascade) // Relationship to Admins
}

model OperationalSettings {
  id                    Int     @id @default(autoincrement())
  adminId               Int     @unique // This ensures each admin can have only one operational settings entry
  admin                 Admins  @relation(fields: [adminId], references: [adminId], onDelete: Cascade)
  timeZone              String
  currency              String
  taxRate               Float
  freeShippingThreshold Float
  orderProcessingTime   Int
  facebook              String? @default("")
  instagram             String? @default("")
  twitter               String? @default("")
  minimumOrderAmount    Float
  backupFrequency       String? @default("")
}
