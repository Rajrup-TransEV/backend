// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Define User model
model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  roleId    Int      @default(2) // Default role ID (e.g., 2 for regular users)
  role      Role     @relation(fields: [roleId], references: [id])
  orders    Order[]
  isSeller  Boolean  @default(false) // Flag to check if the user is a seller
  seller    Seller? 
}

// Define Seller model
model Seller {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  email     String 
  user      User     @relation(fields: [userId], references: [id])
  products  Product[]
}

// Define Role model
model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  users     User[]
}

// Define Product model
model Product {
    id          Int       @id @default(autoincrement())
    name        String
    price       Float
    description String
    sellerId    Int
    seller      Seller    @relation(fields: [sellerId], references: [id])
    orderItems  OrderItem[]
    images      Image[]
}


// Define Order model
model Order {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
}

// Define OrderItem model
model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
}


//Define Image model
model Image {
    id        Int      @id @default(autoincrement())
    data      Bytes    // Stores binary data
    productId Int
    product   Product  @relation(fields: [productId], references: [id])
}