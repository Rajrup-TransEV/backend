generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(100)
  username      String          @unique @db.VarChar(50)
  email         String          @unique @db.VarChar(100)
  password      String          @db.VarChar(255)
  phoneNumber   String?         @db.VarChar(15)
  isSeller      Boolean         @default(false)
  companyName   String?         @db.VarChar(100)
  description   String?         @db.Text
  contactPerson String?         @db.VarChar(100)
  address       String?         @db.Text
  roleId        Int?
  aboutUs       String?         @db.Text
  logo          String?         @db.VarChar(255)
  role          Role?           @relation(fields: [roleId], references: [id])
  orders        Order[]
  resets        PasswordReset[]
  cartItems     CartItem[]
  products      Product[]       @relation("UserProducts")
  Admins        Admins?

  @@index([username, email])
}

// Define seller schema
model Seller {
  id            Int            @id @default(autoincrement())
  products      Product[]
  notifications Notification[]
}

// Define Admins model
model Admins {
  id            Int            @id @default(autoincrement()) // Autoincrementing primary key
  adminId       Int // This will reference the User model where roleId = 1
  admin         User           @relation(fields: [adminId], references: [id], onDelete: Cascade) // Foreign key relationship to User
  AdminSettings AdminSettings?

  @@unique([adminId]) // Ensure that a user can only appear once in the Admins table
}

// Define Role model
model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

// Define Product model
model Product {
  id          Int         @id @default(autoincrement())
  name        String
  price       Float
  description String
  userId      Int
  user        User        @relation("UserProducts", fields: [userId], references: [id])
  images      Image[]
  Seller      Seller?     @relation(fields: [sellerId], references: [id])
  sellerId    Int?
  OrderItem   OrderItem[]
  cartItems   CartItem[]
}

// Define Order model
model Order {
  id         Int         @id @default(autoincrement())
  userId     Int
  // Define the relation from Order to User
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
}

// Define OrderItem model
model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  // Define the relation from OrderItem to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int
  // Define the relation from OrderItem to Product
  product   Product @relation(fields: [productId], references: [id])
}

// Define Image model
model Image {
  id        Int     @id @default(autoincrement())
  filename  String
  data      Bytes
  productId Int
  // Define the relation from Image to Product
  product   Product @relation(fields: [productId], references: [id])
}

// Define CartItem model
model CartItem {
  id        Int @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int @default(1)

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

// Define PasswordReset model
model PasswordReset {
  id        Int      @id @default(autoincrement())
  otp       String
  userId    Int
  expiresAt DateTime
  // Define the relation from PasswordReset to User
  user      User     @relation(fields: [userId], references: [id])

  @@index([otp])
}

model Category {
  id            Int        @id @default(autoincrement())
  name          String
  parentId      Int? // Optional field for parent categories
  parent        Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  subcategories Category[] @relation("CategoryHierarchy")

  @@index([parentId], name: "Category_parentId_idx")
  @@map("Category")
}

model Notification {
  id        Int      @id @default(autoincrement())
  sellerId  Int
  message   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  // Optionally, you might want to relate it to a Seller model
  seller    Seller   @relation(fields: [sellerId], references: [id])
}

model Store {
  id          Int      @id @default(autoincrement())
  name        String
  logo        String?
  address     String
  email       String   @unique
  phoneNumber String
  aboutUs     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// schema.prisma
model AdminSettings {
  id          Int    @id @default(autoincrement()) // Autoincrementing primary key
  siteName    String
  siteLogo    String
  siteAddress String
  siteEmail   String
  storePhone  String
  adminId     Int    @unique // Foreign key that references the Admins table
  admin       Admins @relation(fields: [adminId], references: [adminId], onDelete: Cascade) // Relationship to Admins

  // @@unique([adminId]) // Ensure each AdminSettings entry references a unique Admin
}

model OperationalSettings {
  id                    Int     @id @default(autoincrement())
  timeZone              String
  currency              String
  taxRate               Float
  freeShippingThreshold Float
  orderProcessingTime   Int
  facebook              String? @default("")
  instagram             String? @default("")
  twitter               String? @default("")
  minimumOrderAmount    Float
  backupFrequency       String? @default("")
}
